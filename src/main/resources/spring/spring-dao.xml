<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!-- scan for mappers and let them be autowired -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.yuan.business.**.dao" />
        <!-- 这里 用sqlSessionFactoryBeanName，而不是sqlSessionFactory，接下来用value而不是ref -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:spring/spring-mybatis.xml"/>
        <!-- 自动扫描mapping.xml文件 -->
        <!--<property name="mapperLocations" value="classpath*:mybatis-mapping/*.xml"></property>-->
    </bean>


    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${driver}" />
        <property name="url" value="${url}" />
        <property name="username" value="${username}" />
        <property name="password" value="${password}" />
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${initialSize}"></property>
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${maxActive}"></property>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${maxIdle}"></property>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${minIdle}"></property>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${maxWait}"></property>
        <!-- 验证连接是否有效 -->
        <property name="validationQuery" value="${validationQuery}"></property>
        <!-- 是否自动回收超时连接 -->
        <property name="removeAbandoned" value="${removeAbandoned}"></property>
        <!-- 回收连接的超时时间 -->
        <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}"></property>
    </bean>
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <!-- 配置JDBC数据源的局部事务管理器，使用DataSourceTransactionManager类 -->
    <!-- 该类实现PlatformTransactionManager接口，是针对采用数据源连接的特定实现 -->
    <!-- 配置DataSourceTransactionManager时需要依赖注入DataSource的引用 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 配置基于注解的声明式事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 事务切面配置(编程式事务) -->
   <!-- <aop:config>
        <aop:advisor id="managerTx" advice-ref="txAdvice" pointcut="execution(* com.yuan.business.manage.*Manage.*(..))" order="0"/>
    </aop:config>
    &lt;!&ndash; 通知配置 &ndash;&gt;
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            &lt;!&ndash; 所有以get开头的方法是只读的 &ndash;&gt;
            <tx:method name="get*" read-only="true"/>
            &lt;!&ndash; 其他方法使用默认的事务设置，指定超时时长为5秒 &ndash;&gt;
            <tx:method name="*" isolation="DEFAULT" propagation="REQUIRED" timeout="5"/>
        </tx:attributes>
    </tx:advice>-->
</beans>